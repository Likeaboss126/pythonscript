import cv2
import numpy as np
import easyocr
import pandas as pd
import matplotlib.pyplot as plt

# Load the image
image_path = "table_image.jpg"
image = cv2.imread(image_path)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Thresholding the image
_, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY_INV)

# Detect horizontal and vertical lines
h_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (40, 1))
v_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 40))

h_lines = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, h_kernel, iterations=2)
v_lines = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, v_kernel, iterations=2)

# Combine lines to form a table grid
table_mask = cv2.add(h_lines, v_lines)

# Find contours = potential cell blocks
contours, _ = cv2.findContours(table_mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

# Prepare EasyOCR
reader = easyocr.Reader(['en'], gpu=False)

# Sort contours top-to-bottom, left-to-right
cells = []
for cnt in contours:
    x, y, w, h = cv2.boundingRect(cnt)
    if w > 30 and h > 20:  # ignore noise
        cells.append((x, y, w, h))

# Sort cells into rows and columns
cells = sorted(cells, key=lambda b: (b[1], b[0]))  # y (row), then x (column)

# Group cells into rows
rows = []
current_row = []
threshold = 15  # pixel tolerance for y-coordinate similarity

for i, cell in enumerate(cells):
    if i == 0:
        current_row.append(cell)
        continue
    prev_y = cells[i - 1][1]
    curr_y = cell[1]
    if abs(curr_y - prev_y) <= threshold:
        current_row.append(cell)
    else:
        rows.append(sorted(current_row, key=lambda b: b[0]))  # sort row by x
        current_row = [cell]
rows.append(sorted(current_row, key=lambda b: b[0]))  # last row

# OCR each cell
table_data = []
for row in rows:
    row_data = []
    for x, y, w, h in row:
        cell_img = image[y:y + h, x:x + w]
        text = reader.readtext(cell_img, detail=0)
        row_data.append(" ".join(text).strip())
    table_data.append(row_data)

# Convert to DataFrame
df = pd.DataFrame(table_data)
print(df)
