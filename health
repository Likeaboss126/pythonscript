import streamlit as st
import sqlite3
import pandas as pd
import subprocess

DB_PATH = "health.db"

def get_latest_app_status():
import sqlite3
import pandas as pd

def get_functionality_status():
    conn = sqlite3.connect("your.db")  # Update path
    import sqlite3
import pandas as pd

def get_functionality_status():
    conn = sqlite3.connect("your.db")  # Update your DB path here
    query = """
        SELECT h.*
        FROM health_status h
        JOIN (
            SELECT Functionality, MAX(RunTimestamp) AS LatestRun
            FROM health_status
            GROUP BY Functionality
        ) latest
        ON h.Functionality = latest.Functionality AND h.RunTimestamp = latest.LatestRun
        ORDER BY h.Functionality, h.TimeTaken
    """
    df = pd.read_sql_query(query, conn)
    conn.close()

    result = []

    for func_name, group in df.groupby("Functionality"):
        group = group.reset_index(drop=True)
        total_ko = group["KO"].sum()
        total_ok = group["OK"].sum()
        total_time = group["TimeTaken"].sum()

        if total_ko >= 10:
            # Failure condition met
            last_failing_api = group[group["KO"] > 0].iloc[-1]["APIs"]
            status = f"❌ Failed - {last_failing_api}"
            error_api = last_failing_api
        else:
            status = "✅ Passed"
            error_api = ""

        result.append({
            "Functionality": func_name,
            "OK": int(total_ok),
            "KO": int(total_ko),
            "TimeTaken": round(total_time, 2),
            "Status": status,
            "Error API": error_api
        })

    return pd.DataFrame(result)


def run_health_check_script():
    subprocess.run(["python", "health_checker.py"])

# Streamlit App
st.set_page_config("Application Health Dashboard", layout="wide")
st.title("📊 Application Health Dashboard")

if st.button("🔄 Refresh"):
    st.experimental_rerun()

df = get_latest_app_status()

def color_row(val):
    if val.startswith("❌"):
        return "background-color: #ffe6e6;"  # light red
    elif val.startswith("✅"):
        return "background-color: #e6ffe6;"  # light green
    return ""

# Display with conditional formatting
st.dataframe(
    df.style.applymap(color_row, subset=["Status"]),
    use_container_width=True
)
