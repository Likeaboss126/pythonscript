import streamlit as st
import sqlite3
import pandas as pd
import subprocess

DB_PATH = "health.db"

def get_latest_app_status():
    query = '''
        WITH latest_runs AS (
            SELECT ApplicationName, MAX(DateTime) AS MaxDateTime
            FROM health_status
            GROUP BY ApplicationName
        ),
        latest_data AS (
            SELECT hs.*
            FROM health_status hs
            JOIN latest_runs lr
            ON hs.ApplicationName = lr.ApplicationName AND hs.DateTime = lr.MaxDateTime
        )
        SELECT *
        FROM latest_data
        ORDER BY ApplicationName, DateTime
    '''
    df = pd.read_sql_query(query, conn)
    conn.close()

    status_rows = []

    for func_name, group in df.groupby("Functionality"):
        # Find failed APIs: OK == 0 and KO > 0
        failed_apis_df = group[(group["OK"] == 0) & (group["KO"] > 0)]

        if not failed_apis_df.empty:
            failed_apis = "; ".join(failed_apis_df["APIS"].tolist())
            status = f"❌ Failed - {failed_apis}"
        else:
            failed_apis = ""
            status = "✅ Passed"

        status_rows.append({
            "Functionality": func_name,
            "DateTime": group["DateTime"].max(),
            "OK": group["OK"].sum(),
            "KO": group["KO"].sum(),
            "Failed APIs": failed_apis,
            "Status": status
        })

    result_df = pd.DataFrame(status_rows)
    return result_df["Functionality"].tolist(), result_df

def run_health_check_script():
    subprocess.run(["python", "health_checker.py"])

# Streamlit App
st.set_page_config("Application Health Dashboard", layout="wide")

st.title("📊 Application Health Dashboard")

if st.button("🔄 Refresh"):
    st.experimental_rerun()

df = get_latest_app_status()

def color_row(val):
    if val.startswith("❌"):
        return "background-color: #ffe6e6;"  # light red
    elif val.startswith("✅"):
        return "background-color: #e6ffe6;"  # light green
    return ""

# Display table with color-coded rows
st.dataframe(
    df.style.applymap(color_row, subset=["Status"]),
    use_container_width=True
)
