import requests, json

url = "http://localhost:11434/api/chat"

payload = {
    "model": "llama-3.2.-1-b",
    "messages": [
        {
            "role": "system",
            "content": """You are an expert PostgreSQL assistant.
Only generate SQL queries, no explanations.
Table: api_metrics
Columns: functionality, api_name, average_time_taken, passed, failed, date_time"""
        },
        {
            "role": "user",
            "content": "Find the slowest API yesterday and its functionality"
        }
    ],
    "stream": False
}

r = requests.post(url, json=payload)

# Ollama still may stream multiple JSON lines â†’ collect them
parts = []
for line in r.text.splitlines():
    if line.strip():
        try:
            data = json.loads(line)
            if "message" in data and "content" in data["message"]:
                parts.append(data["message"]["content"])
        except json.JSONDecodeError:
            pass

sql_query = "".join(parts).strip()
print("\nGenerated SQL:\n", sql_query)


import psycopg2
import requests
import json
import matplotlib.pyplot as plt
from datetime import datetime

# ---------------------------
# Database Config
# ---------------------------
DB_CONFIG = {
    "dbname": "your_db",
    "user": "your_user",
    "password": "your_password",
    "host": "localhost",
    "port": 5432
}

# ---------------------------
# Ollama Config
# ---------------------------
OLLAMA_URL = "http://localhost:11434/api/generate"
MODEL = "llama3"   # or whichever Ollama model you use

# ---------------------------
# Step 1 - Generate SQL
# ---------------------------
def generate_sql(user_query: str) -> str:
    system_prompt = """
You are an expert PostgreSQL assistant. 
Only generate SQL queries, no explanations.
Table: api_metrics
Columns: functionality, api_name, average_time_taken, passed, failed, date_time
User question: <insert user query here>

    You are an assistant that generates SQL queries for a Postgres database.
    The table name is `api_logs` with columns:
      - functionality (text)
      - api_name (text)
      - average_time_taken (float)
      - passed (int)
      - failed (int)
      - date_time (timestamp)
    Rules:
      - Always filter correctly by date ranges if mentioned (yesterday, last 7 days, last 2 months, etc).
      - Use GROUP BY with date_time::date if showing trends.
      - Return no explanations, only SQL.
    """
    payload = {
        "model": MODEL,
        "prompt": f"{system_prompt}\nUser question: {user_query}\nSQL:"
    }
    response = requests.post(OLLAMA_URL, json=payload)
    sql_query = response.json()["response"].strip()
    return sql_query

# ---------------------------
# Step 2 - Run SQL
# ---------------------------
def run_sql(sql: str):
    conn = psycopg2.connect(**DB_CONFIG)
    cur = conn.cursor()
    cur.execute(sql)
    rows = cur.fetchall()
    colnames = [desc[0] for desc in cur.description]
    cur.close()
    conn.close()
    return [dict(zip(colnames, row)) for row in rows]

# ---------------------------
# Step 3 - Summarize Results
# ---------------------------
def summarize_results(user_query: str, sql: str, results: list) -> str:
    system_prompt = "You are an assistant that explains SQL results in plain English for business users."
    payload = {
        "model": MODEL,
        "prompt": f"{system_prompt}\nUser question: {user_query}\nSQL: {sql}\nResults: {json.dumps(results)}\nAnswer:"
    }
    response = requests.post(OLLAMA_URL, json=payload)
    return response.json()["response"].strip()

# ---------------------------
# Step 4 - Plot Trends (if applicable)
# ---------------------------
def plot_trend(results: list, x_col="date", y_col="avg_time", api_name=None):
    if not results:
        print("No trend data to plot.")
        return
    dates = [r[x_col] for r in results]
    values = [r[y_col] for r in results]

    # Convert dates if needed
    try:
        dates = [datetime.strptime(str(d), "%Y-%m-%d") for d in dates]
    except:
        pass

    plt.figure(figsize=(8, 4))
    plt.plot(dates, values, marker="o")
    plt.title(f"Trend of {api_name or 'API'} over time")
    plt.xlabel("Date")
    plt.ylabel("Average Response Time (s)")
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# ---------------------------
# Main
# ---------------------------
if __name__ == "__main__":
    # Example: Trend Query
    user_query = "Show me the trend of API 'LoginAPI' average time over last 2 months"

    print("User:", user_query)

    sql = generate_sql(user_query)
    print("\nGenerated SQL:\n", sql)

    results = run_sql(sql)
    print("\nRaw Results:\n", results)

    final_answer = summarize_results(user_query, sql, results)
    print("\nFinal Answer:\n", final_answer)

    # If results contain multiple dates, plot trend
    if results and "date" in results[0] and "avg_time" in results[0]:
        plot_trend(results, x_col="date", y_col="avg_time", api_name="LoginAPI")
