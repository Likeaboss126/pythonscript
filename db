package com.example.reports;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;

public class ExtentManager {
    private static ExtentReports extent;

    public static synchronized ExtentReports getInstance() {
        if (extent == null) {
            ExtentSparkReporter spark = new ExtentSparkReporter("target/extent-reports/ExtentReport.html");
            extent = new ExtentReports();
            extent.attachReporter(spark);
        }
        return extent;
    }

    public static synchronized void flush() {
        if (extent != null) {
            extent.flush();
        }
    }
}



package com.example.reports;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.intuit.karate.Results;
import com.intuit.karate.core.FeatureResult;
import com.intuit.karate.core.ScenarioResult;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

public class KarateExtentReporter {

    public static void addKarateResults(String testName, Results results) {
        ExtentReports extent = ExtentManager.getInstance();
        ExtentTest parentTest = extent.createTest(testName);

        // ✅ Convert to list explicitly — works for all Karate versions
        List<FeatureResult> featureResults = results.getFeatureResults();

        for (FeatureResult featureResult : featureResults) {
            ExtentTest featureNode = parentTest.createNode(featureResult.getFeature().getName());

            // iterate over scenarios
            List<ScenarioResult> scenarioResults = featureResult.getScenarioResults();
            for (ScenarioResult scenarioResult : scenarioResults) {
                ExtentTest scenarioNode = featureNode.createNode(scenarioResult.getScenario().getName());

                if (scenarioResult.isFailed()) {
                    scenarioNode.fail(scenarioResult.getError());

                    // Log details only for failed scenarios
                    try {
                        String logFilePath = scenarioResult.getScenario().getLogFilePath();
                        if (logFilePath != null && Files.exists(Paths.get(logFilePath))) {
                            String logContent = new String(Files.readAllBytes(Paths.get(logFilePath)));
                            if (logContent.length() > 8000) {
                                logContent = logContent.substring(0, 8000) + "... [truncated]";
                            }
                            scenarioNode.info("<pre>" + escapeHtml(logContent) + "</pre>");
                        }
                    } catch (IOException e) {
                        scenarioNode.warning("Failed to read scenario log: " + e.getMessage());
                    }

                } else {
                    scenarioNode.pass("Passed");
                }
            }
        }
    }

    private static String escapeHtml(String text) {
        return text == null ? "" : text
                .replace("&", "&amp;")
                .replace("<", "&lt;")
                .replace(">", "&gt;");
    }
}

